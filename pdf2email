#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# pdf2email - A CUPS backend written in Python. It uses GhostScript to create a
# PDF document and sends it via email to the user that requested the print.
#
# Copyright (c) George Notaras <George [D.O.T.] Notaras [A.T.] gmail [D.O.T.] com>
# Copyright (c) Emiliano Heyns <Emiliano.Heyns@HAN.nl>
#
# Project Home: https://github.com/retorquere/pdf2email
# Based on: http://www.g-loaded.eu/2006/12/03/pdf2email-cups-backend/
#
# License: GPLv2
#
# This program is released with absolutely no warranty, expressed or implied,
# and absolutely no support.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the:
#
# Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston,
# MA 02111-1307  USA
#

import sys, os, syslog, datetime
import ConfigParser
import subprocess
Config = ConfigParser.ConfigParser({'port': 25, 'SSL': False})
config = '/etc/cups/' + os.path.splitext(os.path.basename(sys.argv[0]))[0] + '.conf'
Config.readfp(open(config))

# Import smtplib for the actual sending function
import smtplib

# Here are the email package modules we'll need
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders


__version__ = "0.2"

class Backend:
  def __init__(self):
    self.exit_status = 0

  def exit(self):
    sys.exit(self.exit_status)

  def run(self):
    self.request_datetime = datetime.datetime.now()

    try:
      self.postscript = self.get_output_file('ps')
      self.pdf = self.get_output_file('pdf')
    except Exception, err:
      if err[0] <> "DEVICE_URI":  # (TODO) RE-EXAMINE THIS - This occurs when CUPS is (re)started. Probably an internal backend check.
        self.send_email(str(err))

      self.exit()

    try:
      self.create_pdf()
    except Exception, err:
      self.send_email("Failed to create PDF: " + str(err))
    else:
      try:
        self.send_email()
      except Exception, err:
        self.send_email("Failed to send PDF document to user: " + Config.get('To', 'email') + '; ' + str(err))

    if os.path.exists(self.postscript):
      os.remove(self.postscript)
    if os.path.exists(self.pdf):
      os.remove(self.pdf)
    self.exit()

  def log(self, prio, msg):
    syslog.syslog(prio, "CUPS PDF backend: %s" % msg)
  def info(self, msg):
    self.log(syslog.LOG_INFO, msg)
  def error(self, msg):
    self.log(syslog.LOG_ERR, msg)
    self.exit_status = 1

  def get_writable_dir(self):
    """Returns the writable directory path.
  
    The Device URI of the printer is: {backend_name}:{/path/to/writable/dir}
    This is set in /etc/cups/printers.conf and is kept in an environmental
    variable named "DEVICE_URI" while this process runs.
    """
    dev_uri = os.environ['DEVICE_URI']
    write_dir = dev_uri.split(":")[1].strip()

    if not os.path.exists(write_dir):
      raise Exception("Device URI: Path does not exist: %s" % write_dir)
    if not os.access(write_dir, os.R_OK | os.W_OK):
      raise Exception("User does not have read/write access to: %s" % write_dir)

    return write_dir

  def get_output_file(self, ext):
    """Returns the full path to the output file."""
    filename = "%s_%s_%s.%s" % (sys.argv[2], sys.argv[1], self.request_datetime.strftime("%Y%m%d_%H%M%S"), ext)
    return os.path.join(self.get_writable_dir(), filename)

  def create_pdf(self):
    """Creates the PDF file.
  
    Runs the GS interpreter as a child process and returns the exit code.
  
    External Tip: when creating pdf files with GS, an initial 'save' helps so that fonts are not flushed between pages. (tip source unknown)
    -sPAPERSIZE acts like a default value and needs to be set, but does not affect the final print.
    """

    
    with open(self.postscript, 'w') as postscript:
      postscript.write(sys.stdin.read())

    pdfmarks_file = None
    if Config.has_option('PDF', 'marks'):
      pdfmarks_file = Config.get('PDF', 'marks')
      if not os.path.exists(pdfmarks_file):
        self.info("Cannot find PDFMarks file: %s PDFMarks not used." % pdfmarks_file)
        pdfmarks_file = None

    command = [
      'gs',
      '-q',
      '-dNOPAUSE',
      '-dBATCH',
      '-sDEVICE=pdfwrite',
      '-dCompatibilityLevel=1.4',
      '-sPAPERSIZE=a4',
      '-dPDFSETTINGS=/printer',
      '-sOutputFile=%s' % self.pdf,
      '-c', 'save', 'pop',
      '-f', self.postscript
    ]
    returncode = subprocess.call(command)

    if not returncode in [None, 0]:
      raise Exception("Could not create PDF")

  def send_email(self, pdferror = False):
    """Sends the email.
  
    Sends the created pdf file as an email attachment. If an error has
    occured in the PDF creation process, it just sends a failure notice.
    """
    # Create the container (outer) email message.
    outer = MIMEMultipart()
    outer["Subject"] = "PDF print request on %s" % self.request_datetime.strftime("%A %b %m %Y %H:%M:%S")
    outer["From"] = Config.get(sys.argv[2], 'email')
    outer["To"] = Config.get('To', 'email')
    outer.preamble = "Requested PDF print."
    # Guarantees the message ends in a newline
    outer.epilogue = ""

    if pdferror:
      outer["To"] = Config.get(sys.argv[2], 'email')
      self.error(pdferror)
    else:
      outer["To"] = Config.get('To', 'email')
  
    # TEXT PART
    infotext = []
    infotext.append("Print Service Notification - DO NOT REPLY\r\n")
    if pdferror:
      infotext.append("PDF print with job ID: %s - FAILED!\r\n" % sys.argv[1])
      infotext.append(pdferror + "\r\n")
    else:
      infotext.append("Print job ID: %s" % sys.argv[1])
      infotext.append("Date and time of print request: %s" % self.request_datetime.strftime("%A %b %m %Y %H:%M:%S"))
      infotext.append("Processing time: %s" % (datetime.datetime.now() - self.request_datetime))
      infotext.append("Output file size: %.3f Kb\r\n" % (float(os.path.getsize(self.pdf))/float(1024)) )
      infotext.append("The PDF print was completed succesfully.")
      infotext.append("The PDF file is attached to this email.\r\n")
  
    msg = MIMEText("\r\n".join(infotext), "plain", "utf-8")
    outer.attach(msg)
  
    # PDF ATTACHMENT PART
    if not pdferror:
      fp = open(self.pdf, 'rb')
      msg = MIMEBase("application", "pdf")
      msg.set_payload(fp.read())
      fp.close()
      # Encode the payload using Base64
      Encoders.encode_base64(msg)
      # Set the filename parameter
      msg.add_header('Content-Disposition', 'attachment', filename = os.path.basename(self.pdf))
      outer.attach(msg)
  
    # Send the email via an SMTP server.
    s = smtplib.SMTP(Config.get('SMTP', 'server'), Config.get('SMTP', 'port'))
    if Config.get('SMTP', 'SSL'):
      s.ehlo()
      s.starttls()
      s.ehlo()
    if Config.has_option(sys.argv[2], 'username'):
      s.esmtp_features['auth'] = 'LOGIN PLAIN'
      s.login(Config.get(sys.argv[2], 'username'), Config.get(sys.argv[2], 'password'))
    s.sendmail(Config.get(sys.argv[2], 'email'), [Config.get('To', 'email')], outer.as_string())
    s.close()

def main():
  if len(sys.argv) == 1:
    # Without arguments should give backend info.
    # This is also used when lpinfo -v is issued, where it should include "direct this_backend"
    sys.stdout.write("direct %s \"Unknown\" \"Direct PDF Printing/Delivery to user email\"\n" % os.path.basename(sys.argv[0]))
    sys.stdout.flush()
    sys.exit(0)

  backend = Backend()
  if len(sys.argv) not in (5,6):
    sys.stdout.write("Usage: %s job-id user title copies options [file]\n" % os.path.basename(sys.argv[0]))
    sys.stdout.flush()
    backend.error("Wrong number of arguments. Usage: %s job-id user" % sys.argv[0])
  else:
    backend.run()

  backend.exit()

if __name__=='__main__':
  main()
